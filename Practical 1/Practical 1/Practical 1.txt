
#include <Windows.h>
#include <gl/GL.h>

#pragma comment (lib, "OpenGL32.lib")

#define WINDOW_TITLE "Practical Exercise 1"

int qNo = 1;  // question no

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_DESTROY:
		PostQuitMessage(0);
		break;

	case WM_KEYDOWN:
		if (wParam == VK_ESCAPE) PostQuitMessage(0);
		else if (wParam == '1')      // when press key '1'
			qNo = 1;
		else if (wParam == '2')      // when press key '2'
			qNo = 2;
		else if (wParam == '3')      // when press key '3'
			qNo = 3;
		else if (wParam == '4')      // when press key '4'
			qNo = 4;
		break;

	default:
		break;
	}

	return DefWindowProc(hWnd, msg, wParam, lParam);
}
//--------------------------------------------------------------------

bool initPixelFormat(HDC hdc)
{
	PIXELFORMATDESCRIPTOR pfd;
	ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));

	pfd.cAlphaBits = 8;
	pfd.cColorBits = 32;
	pfd.cDepthBits = 24;
	pfd.cStencilBits = 0;

	pfd.dwFlags = PFD_DOUBLEBUFFER | PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW;

	pfd.iLayerType = PFD_MAIN_PLANE;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;

	// choose pixel format returns the number most similar pixel format available
	int n = ChoosePixelFormat(hdc, &pfd);

	// set pixel format returns whether it sucessfully set the pixel format
	if (SetPixelFormat(hdc, n, &pfd))
	{
		return true;
	}
	else
	{
		return false;
	}
}
//--------------------------------------------------------------------

void triangle() {

}

void point() {

}

void lines() {

}

void lineStrip() {

}

void lineLoop() {

}

void polygon() {
	glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	glPointSize(10.0);         // set the point size
	glLineWidth(3.0);          // set the line width
	glBegin(GL_POLYGON);       // draw polygon
	glColor3f(1.0, 0.0, 0.0);     // red
	glVertex2f(-0.5, 0.0);        // v1
	glColor3f(0.0, 1.0, 0.0);     // green
	glVertex2f(0.0, 0.5);         // v2
	glColor3f(0.0, 0.0, 1.0);     // blue
	glVertex2f(0.5, 0.0);         // v3
	glEnd();
}

void p1Demo() {
	// glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	// glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	// glBegin(GL_TRIANGLES);        // draw a triangle
	// glColor3f(1.0, 0.0, 0.0);     // red
	// glVertex2f(-0.5, 0.0);    // v1
	// glColor3f(0.0, 1.0, 0.0); // green
	// glVertex2f(0.0, 0.5);     // v2
	// glColor3f(0.0, 0.0, 1.0); // blue
	// glVertex2f(0.5, 0.0);     // v3
	// glEnd();  




	//glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	//glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	//glPointSize(10.0);         // set the point size
	//glBegin(GL_POINTS);        // draw points
	//glColor3f(1.0, 0.0, 0.0);     // red
	//glVertex2f(-0.5, 0.0);        // v1
	//glColor3f(0.0, 1.0, 0.0);     // green
	//glVertex2f(0.0, 0.5);         // v2
	//glColor3f(0.0, 0.0, 1.0);     // blue
	//glVertex2f(0.5, 0.0);         // v3
	//glEnd();




	//glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	//glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	//glPointSize(10.0);        // set the point size
	//glLineWidth(3.0);         // set the line width
	//glBegin(GL_LINES);        // draw lines
	//glColor3f(1.0, 0.0, 0.0);     // red
	//glVertex2f(-0.5, 0.0);        // v1
	//glColor3f(0.0, 1.0, 0.0);     // green
	//glVertex2f(0.0, 0.5);         // v2
	//glColor3f(0.0, 0.0, 1.0);     // blue
	//glVertex2f(0.5, 0.0);         // v3
	//glEnd();





	//glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	//glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	//glPointSize(10.0);        // set the point size
	//glLineWidth(3.0);         // set the line width
	//glBegin(GL_LINE_STRIP);       // draw the line strip
	//glColor3f(1.0, 0.0, 0.0);     // red
	//glVertex2f(-0.5, 0.0);        // v1
	//glColor3f(0.0, 1.0, 0.0);     // green
	//glVertex2f(0.0, 0.5);         // v2
	//glColor3f(0.0, 0.0, 1.0);     // blue
	//glVertex2f(0.5, 0.0);         // v3
	//glEnd();






	//glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	//glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	//glPointSize(10.0);        // set the point size
	//glLineWidth(3.0);         // set the line width
	//glBegin(GL_LINE_LOOP);    // draw the line loop
	//glColor3f(1.0, 0.0, 0.0);     // red
	//glVertex2f(-0.5, 0.0);        // v1
	//glColor3f(0.0, 1.0, 0.0);     // green
	//glVertex2f(0.0, 0.5);         // v2
	//glColor3f(0.0, 0.0, 1.0);     // blue
	//glVertex2f(0.5, 0.0);         // v3
	//glEnd();

}


void pahangFlag() {
	glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	glBegin(GL_QUADS);
	glColor3f(1.0, 1.0, 1.0);      // WHITE
		glVertex2f(-0.5, 0.0);     // v1
		glVertex2f(-0.5, 0.5);     // v2
		glVertex2f(0.5, 0.5);      // v3
		glVertex2f(0.5, 0.0);      // v4
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0, 0.0, 0.0);   // BLACK 
	glVertex2f(-0.5, -0.5);     // v1
	glVertex2f(-0.5, 0.0);      // v2
	glVertex2f(0.5, 0.0);       // v3
	glVertex2f(0.5, -0.5);      // v4
	glEnd();

	glLineWidth(3.0);
	glBegin(GL_LINE_LOOP);
	glColor3f(0.0, 0.0, 1.0);   // BLUE
	glVertex2f(-0.5, -0.5);     // v1
	glVertex2f(-0.5, 0.5);      // v2
	glVertex2f(0.5, 0.5);       // v3
	glVertex2f(0.5, -0.5);      // v4
	glEnd();
}

void n9Flag() {
	glClearColor(0.0, 0.0, 0.0, 0.0);  // clear the background
	glClear(GL_COLOR_BUFFER_BIT);      // clear the color buffer

	glBegin(GL_TRIANGLES);
	glColor3f(1.0, 0.0, 0.0);
	glVertex2f(0.0, 0.0);
	glVertex2f(0.5, 0.0);
	glVertex2f(0.5, -0.5);
	glEnd;

	glBegin(GL_TRIANGLES);
	glColor3f(0.0, 0.0, 0.0);
	glVertex2f(0.0, 0.0);
	glVertex2f(0.5, -0.5);
	glVertex2f(0.0, -0.5);
	glEnd;

	glBegin(GL_QUADS);
	glColor3f(1.0, 1.0, 1.0);
	glVertex2f(0.5, 0.0);
	glVertex2f(1.0, 0.0);
	glVertex2f(1.0, -0.5);
	glVertex2f(0.5, -0.5);
	glEnd;

	glBegin(GL_QUADS);
	glColor3f(1.0, 1.0, 1.0);
	glVertex2f(0.5, -0.5);
	glVertex2f(1.0, -0.5);
	glVertex2f(1.0, -1.0);
	glVertex2f(0.5, -1.0);
	glEnd;
}

void eng() {

}

void display()
{
	switch (qNo) {
		case 1:
			pahangFlag();
			break;
		case 2:
			polygon();
			break;
		case 3:
			n9Flag();
			break;
		default:
			pahangFlag();
			break;
	}
	
}

int WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR, int nCmdShow)
{
	WNDCLASSEX wc;
	ZeroMemory(&wc, sizeof(WNDCLASSEX));

	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = GetModuleHandle(NULL);
	wc.lpfnWndProc = WindowProcedure;
	wc.lpszClassName = WINDOW_TITLE;
	wc.style = CS_HREDRAW | CS_VREDRAW;

	if (!RegisterClassEx(&wc)) return false;

	HWND hWnd = CreateWindow(WINDOW_TITLE, WINDOW_TITLE, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
		NULL, NULL, wc.hInstance, NULL);

	//--------------------------------
	//	Initialize window for OpenGL
	//--------------------------------

	HDC hdc = GetDC(hWnd);

	//	initialize pixel format for the window
	initPixelFormat(hdc);

	//	get an openGL context
	HGLRC hglrc = wglCreateContext(hdc);

	//	make context current
	if (!wglMakeCurrent(hdc, hglrc)) return false;

	//--------------------------------
	//	End initialization
	//--------------------------------

	ShowWindow(hWnd, nCmdShow);

	MSG msg;
	ZeroMemory(&msg, sizeof(msg));

	while (true)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT) break;

			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		display();

		SwapBuffers(hdc);
	}

	UnregisterClass(WINDOW_TITLE, wc.hInstance);

	return true;
}
//--------------------------------------------------------------------